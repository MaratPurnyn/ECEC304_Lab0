 0000                   cpu LMM
                        .module main.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./main.c
                        .area data(ram, con, rel)
 0000                   .dbfile ./main.c
 0000           _dBounce::
 0000 0000              .word 0
 0002                   .dbfile C:\Users\msp72\DOCUME~1\GitHub\ECEC30~1\LAB4B2\LAB4B2\main.c
 0002                   .dbsym e dBounce _dBounce i
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\msp72\DOCUME~1\GitHub\ECEC30~1\LAB4B2\LAB4B2\main.c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\msp72\DOCUME~1\GitHub\ECEC30~1\LAB4B2\LAB4B2\main.c
 0000           _pulseWidth::
 0000 FF                .byte 255
 0001                   .dbsym e pulseWidth _pulseWidth c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\msp72\DOCUME~1\GitHub\ECEC30~1\LAB4B2\LAB4B2\main.c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\msp72\DOCUME~1\GitHub\ECEC30~1\LAB4B2\LAB4B2\main.c
 0000           _prt1::
 0000 00                .byte 0
 0001                   .dbsym e prt1 _prt1 c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\msp72\DOCUME~1\GitHub\ECEC30~1\LAB4B2\LAB4B2\main.c
                        .area text(rom, con, rel)
 0000                   .dbfile C:\Users\msp72\DOCUME~1\GitHub\ECEC30~1\LAB4B2\LAB4B2\main.c
 0000                   .dbfunc e main _main fV
 0000           _main::
 0000                   .dbline -1
 0000                   .dbline 16
 0000           ; //----------------------------------------------------------------------------
 0000           ; // C main line
 0000           ; //----------------------------------------------------------------------------
 0000           ; 
 0000           ; #include <m8c.h>        // part specific constants and macros
 0000           ; #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
 0000           ; #include "LCD.h"
 0000           ; #include "FanPWM.h"
 0000           ; #include "TachOverridePWM.h"
 0000           ; 
 0000           ; unsigned int dBounce = 0;
 0000           ; unsigned char pulseWidth = 0xFF;
 0000           ; unsigned char prt1 = 0x00;
 0000           ; 
 0000           ; void main(void)
 0000           ; {
 0000                   .dbline 18
 0000           ;       // Insert your main routine code here.
 0000           ;       LCD_Start();
 0000 10                push X
 0001 7C0000            xcall _LCD_Start
 0004                   .dbline 19
 0004           ;       LCD_Init();
 0004 7C0000            xcall _LCD_Init
 0007                   .dbline 20
 0007           ;       LCD_Position(1,4);
 0007 5704              mov X,4
 0009 5001              mov A,1
 000B 7C0000            xcall _LCD_Position
 000E                   .dbline 21
 000E           ;       FanPWM_WritePulseWidth(pulseWidth);
 000E 62D000            mov REG[0xd0],>_pulseWidth
 0011 5100              mov A,[_pulseWidth]
 0013 7C0000            xcall _FanPWM_WritePulseWidth
 0016                   .dbline 22
 0016           ;       FanPWM_Start();
 0016 7C0000            xcall _FanPWM_Start
 0019                   .dbline 23
 0019           ;       TachOverridePWM_Start();
 0019 7C0000            xcall _TachOverridePWM_Start
 001C                   .dbline 24
 001C           ;       LCD_PrHexByte(FanPWM_bReadPulseWidth());
 001C 7C0000            xcall _FanPWM_bReadPulseWidth
 001F 20                pop X
 0020 62D000            mov REG[0xd0],>__r0
 0023 10                push X
 0024 7C0000            xcall _LCD_PrHexByte
 0027 20                pop X
 0028                   .dbline 25
 0028           ;       INT_MSK0 |= 0x40;
 0028 43E040            or REG[0xe0],64
 002B                   .dbline 26
 002B           ;       M8C_EnableGInt;
 002B 7101                      or  F, 01h
 002D           
 002D 8065              xjmp L3
 002F           L2:
 002F                   .dbline 27
 002F           ;       while(1){
 002F                   .dbline 28
 002F           ;               prt1 = PRT1DR;
 002F 5D04              mov A,REG[0x4]
 0031 62D000            mov REG[0xd0],>_prt1
 0034 5300              mov [_prt1],A
 0036                   .dbline 29
 0036           ;               prt1 &= 0x01;
 0036 260001            and [_prt1],1
 0039                   .dbline 30
 0039           ;               if(prt1 == 0x01){
 0039 3C0001            cmp [_prt1],1
 003C B025              jnz L5
 003E                   .dbline 31
 003E           ;                       dBounce++;
 003E                   .dbline 31
 003E 62D000            mov REG[0xd0],>_dBounce
 0041 7601              inc [_dBounce+1]
 0043 0E0000            adc [_dBounce],0
 0046                   .dbline 32
 0046           ;                       if(dBounce == 3){
 0046 3C0000            cmp [_dBounce],0
 0049 B021              jnz L6
 004B 3C0103            cmp [_dBounce+1],3
 004E B01C              jnz L6
 0050           X1:
 0050                   .dbline 33
 0050           ;                               pulseWidth = pulseWidth - 0x20;
 0050                   .dbline 33
 0050 62D000            mov REG[0xd0],>_pulseWidth
 0053 5100              mov A,[_pulseWidth]
 0055 1120              sub A,32
 0057 5300              mov [_pulseWidth],A
 0059                   .dbline 34
 0059           ;                               FanPWM_WritePulseWidth(pulseWidth);
 0059 10                push X
 005A 5100              mov A,[_pulseWidth]
 005C 7C0000            xcall _FanPWM_WritePulseWidth
 005F 20                pop X
 0060                   .dbline 35
 0060           ;                       }
 0060                   .dbline 36
 0060           ;               }
 0060 800A              xjmp L6
 0062           L5:
 0062                   .dbline 38
 0062           ;               else
 0062           ;               {
 0062                   .dbline 39
 0062           ;                       dBounce = 0;
 0062 62D000            mov REG[0xd0],>_dBounce
 0065 550100            mov [_dBounce+1],0
 0068 550000            mov [_dBounce],0
 006B                   .dbline 40
 006B           ;               }
 006B           L6:
 006B                   .dbline 42
 006B           ; 
 006B           ;               LCD_Position(0,4);
 006B 10                push X
 006C 5704              mov X,4
 006E 5000              mov A,0
 0070 7C0000            xcall _LCD_Position
 0073 20                pop X
 0074                   .dbline 43
 0074           ;               LCD_PrHexByte(dBounce);
 0074 62D000            mov REG[0xd0],>_dBounce
 0077 5101              mov A,[_dBounce+1]
 0079 62D000            mov REG[0xd0],>__r0
 007C 10                push X
 007D 7C0000            xcall _LCD_PrHexByte
 0080                   .dbline 44
 0080           ;               LCD_Position(1,4);
 0080 5704              mov X,4
 0082 5001              mov A,1
 0084 7C0000            xcall _LCD_Position
 0087                   .dbline 45
 0087           ;               LCD_PrHexByte(FanPWM_bReadPulseWidth());
 0087 7C0000            xcall _FanPWM_bReadPulseWidth
 008A 20                pop X
 008B 62D000            mov REG[0xd0],>__r0
 008E 10                push X
 008F 7C0000            xcall _LCD_PrHexByte
 0092 20                pop X
 0093                   .dbline 46
 0093           ;       }
 0093           L3:
 0093                   .dbline 27
 0093 8F9B              xjmp L2
 0095           X0:
 0095                   .dbline -2
 0095           L1:
 0095                   .dbline 0 ; func end
 0095 8FFF              jmp .
 0097                   .dbend
