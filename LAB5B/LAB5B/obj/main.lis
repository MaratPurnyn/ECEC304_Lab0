 0000                   cpu LMM
                        .module main.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./main.c
                        .area data(ram, con, rel)
 0000                   .dbfile ./main.c
 0000           _pulsewidth::
 0000 00                .byte 0
 0001                   .dbfile C:\Users\msp72\DOCUME~1\GitHub\ECEC30~1\LAB5B\LAB5B\main.c
 0001                   .dbsym e pulsewidth _pulsewidth c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\msp72\DOCUME~1\GitHub\ECEC30~1\LAB5B\LAB5B\main.c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\msp72\DOCUME~1\GitHub\ECEC30~1\LAB5B\LAB5B\main.c
 0000           _pwDir::
 0000 00                .byte 0
 0001                   .dbsym e pwDir _pwDir c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\msp72\DOCUME~1\GitHub\ECEC30~1\LAB5B\LAB5B\main.c
                        .area text(rom, con, rel)
 0000                   .dbfile C:\Users\msp72\DOCUME~1\GitHub\ECEC30~1\LAB5B\LAB5B\main.c
 0000                   .dbfunc e main _main fV
 0000           _main::
 0000                   .dbline -1
 0000                   .dbline 14
 0000           ; //----------------------------------------------------------------------------
 0000           ; // C main line
 0000           ; //----------------------------------------------------------------------------
 0000           ; 
 0000           ; #include <m8c.h>        // part specific constants and macros
 0000           ; #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
 0000           ; #include "PWM8.h"
 0000           ; #include "LCD.h"
 0000           ; 
 0000           ; unsigned char pulsewidth = 0x00;
 0000           ; unsigned char pwDir = 0;
 0000           ; 
 0000           ; void main(void)
 0000           ; {
 0000                   .dbline 15
 0000           ;       LCD_Start();
 0000 10                push X
 0001 7C0000            xcall _LCD_Start
 0004                   .dbline 16
 0004           ;       LCD_Init();
 0004 7C0000            xcall _LCD_Init
 0007                   .dbline 17
 0007           ;       LCD_InitBG(LCD_SOLID_BG );
 0007 5000              mov A,0
 0009 7C0000            xcall _LCD_InitBG
 000C                   .dbline 18
 000C           ;       PWM8_Start();
 000C 7C0000            xcall _PWM8_Start
 000F 20                pop X
 0010                   .dbline 19
 0010           ;       M8C_EnableGInt ; // Uncomment this line to enable Global Interrupts
 0010 7101                      or  F, 01h
 0012           
 0012                   .dbline 20
 0012           ;       INT_MSK0 |= 0x20;
 0012 43E020            or REG[0xe0],32
 0015                   .dbline 21
 0015           ;       PRT0IE |= 0x01;
 0015 430101            or REG[0x1],1
 0018                   .dbline 22
 0018           ;       PRT0DM0 = 0x01; //DM0[0-3] = 1
 0018 7110              or F,0x10  ; iopage = 1
 001A 620001            mov REG[0],1
 001D                   .dbline 23
 001D           ;       PRT0DM1 = 0x01; //DM1[0-3] = 0
 001D 620101            mov REG[0x1],1
 0020                   .dbline 24
 0020           ;       PRT0DM2 = 0x00; //DM1[0-3] = 0
 0020 70CF              and F,0xCF      ; iopage = 0
 0022 620300            mov REG[0x3],0
 0025                   .dbline 26
 0025           ; 
 0025           ;       PRT0IC1 = 0x01;
 0025 7110              or F,0x10  ; iopage = 1
 0027 620301            mov REG[0x3],1
 002A                   .dbline 27
 002A           ;       PRT0IC0 = 0x00;
 002A 620200            mov REG[0x2],0
 002D 70CF              and F,0xCF      ; iopage = 0
 002F 804B              xjmp L3
 0031           L2:
 0031                   .dbline 28
 0031           ;       while(1){
 0031                   .dbline 29
 0031           ;               if(pulsewidth==255){
 0031 62D000            mov REG[0xd0],>_pulsewidth
 0034 3C00FF            cmp [_pulsewidth],-1
 0037 B007              jnz L5
 0039                   .dbline 30
 0039           ;                       pwDir = 1;
 0039                   .dbline 30
 0039 62D000            mov REG[0xd0],>_pwDir
 003C 550001            mov [_pwDir],1
 003F                   .dbline 31
 003F           ;               }
 003F           L5:
 003F                   .dbline 32
 003F           ;               PWM8_WritePulseWidth(pulsewidth);
 003F 10                push X
 0040 62D000            mov REG[0xd0],>_pulsewidth
 0043 5100              mov A,[_pulsewidth]
 0045 7C0000            xcall _PWM8_WritePulseWidth
 0048 20                pop X
 0049                   .dbline 33
 0049           ;               LCD_DrawBG(0,0,16,pulsewidth/5);
 0049 62D000            mov REG[0xd0],>_pulsewidth
 004C 5005              mov A,5
 004E 08                push A
 004F 5100              mov A,[_pulsewidth]
 0051 08                push A
 0052 62D000            mov REG[0xd0],>__r0
 0055 7C0000            xcall __divmodu_8X8_8
 0058 18                pop A
 0059 38FF              add SP,-1
 005B 10                push X
 005C 08                push A
 005D 5010              mov A,16
 005F 08                push A
 0060 5000              mov A,0
 0062 08                push A
 0063 08                push A
 0064 7C0000            xcall _LCD_DrawBG
 0067 38FC              add SP,-4
 0069                   .dbline 34
 0069           ;               LCD_DrawBG(1,0,16,72);
 0069 5048              mov A,72
 006B 08                push A
 006C 5010              mov A,16
 006E 08                push A
 006F 5000              mov A,0
 0071 08                push A
 0072 5001              mov A,1
 0074 08                push A
 0075 7C0000            xcall _LCD_DrawBG
 0078 38FC              add SP,-4
 007A 20                pop X
 007B                   .dbline 35
 007B           ;       }
 007B           L3:
 007B                   .dbline 28
 007B 8FB5              xjmp L2
 007D           X0:
 007D                   .dbline -2
 007D           L1:
 007D                   .dbline 0 ; func end
 007D 8FFF              jmp .
 007F                   .dbend
 007F                   .dbfunc e gpioISR _gpioISR fV
 007F           _gpioISR::
 007F                   .dbline -1
 007F 71C0              or F,-64
 0081 08                push A
 0082 5DD0              mov A,REG[0xd0]
 0084 08                push A
 0085                   .dbline 40
 0085           ; }
 0085           ; 
 0085           ; #pragma interrupt_handler gpioISR
 0085           ; 
 0085           ; void gpioISR(void){
 0085                   .dbline 41
 0085           ;       if(pwDir == 0){
 0085 62D000            mov REG[0xd0],>_pwDir
 0088 3C0000            cmp [_pwDir],0
 008B B009              jnz L8
 008D                   .dbline 42
 008D           ;               pulsewidth += 5;
 008D                   .dbline 42
 008D 62D000            mov REG[0xd0],>_pulsewidth
 0090 060005            add [_pulsewidth],5
 0093                   .dbline 43
 0093           ;       }
 0093 800A              xjmp L9
 0095           L8:
 0095                   .dbline 44
 0095           ;       else{
 0095                   .dbline 45
 0095           ;               pulsewidth -= 5;
 0095 62D000            mov REG[0xd0],>_pulsewidth
 0098 5100              mov A,[_pulsewidth]
 009A 1105              sub A,5
 009C 5300              mov [_pulsewidth],A
 009E                   .dbline 46
 009E           ;       }
 009E           L9:
 009E                   .dbline -2
 009E           L7:
 009E 18                pop A
 009F 60D0              mov REG[208],A
 00A1 18                pop A
 00A2                   .dbline 0 ; func end
 00A2 7E                reti
 00A3                   .dbend
