 0000                   cpu LMM
                        .module main.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./main.c
                        .area data(ram, con, rel)
 0000                   .dbfile ./main.c
 0000           _dBounce::
 0000 0000              .word 0
 0002                   .dbfile C:\Users\msp72\DOCUME~1\GitHub\ECEC30~1\LAB4B\LAB4B\main.c
 0002                   .dbsym e dBounce _dBounce i
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\msp72\DOCUME~1\GitHub\ECEC30~1\LAB4B\LAB4B\main.c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\msp72\DOCUME~1\GitHub\ECEC30~1\LAB4B\LAB4B\main.c
 0000           _pulseWidth::
 0000 FF                .byte 255
 0001                   .dbsym e pulseWidth _pulseWidth c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\msp72\DOCUME~1\GitHub\ECEC30~1\LAB4B\LAB4B\main.c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\msp72\DOCUME~1\GitHub\ECEC30~1\LAB4B\LAB4B\main.c
 0000           _prt1::
 0000 00                .byte 0
 0001                   .dbsym e prt1 _prt1 c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\msp72\DOCUME~1\GitHub\ECEC30~1\LAB4B\LAB4B\main.c
                        .area text(rom, con, rel)
 0000                   .dbfile C:\Users\msp72\DOCUME~1\GitHub\ECEC30~1\LAB4B\LAB4B\main.c
 0000                   .dbfunc e main _main fV
 0000           _main::
 0000                   .dbline -1
 0000                   .dbline 15
 0000           ; //----------------------------------------------------------------------------
 0000           ; // C main line
 0000           ; //----------------------------------------------------------------------------
 0000           ; 
 0000           ; #include <m8c.h>        // part specific constants and macros
 0000           ; #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
 0000           ; #include "LCD.h"
 0000           ; #include "DBB00.h"
 0000           ; 
 0000           ; unsigned int dBounce = 0;
 0000           ; unsigned char pulseWidth = 0xFF;
 0000           ; unsigned char prt1 = 0x00;
 0000           ; 
 0000           ; void main(void)
 0000           ; {
 0000                   .dbline 17
 0000           ;       // Insert your main routine code here.
 0000           ;       LCD_Start();
 0000 10                push X
 0001 7C0000            xcall _LCD_Start
 0004                   .dbline 18
 0004           ;       LCD_Init();
 0004 7C0000            xcall _LCD_Init
 0007                   .dbline 19
 0007           ;       LCD_Position(1,4);
 0007 5704              mov X,4
 0009 5001              mov A,1
 000B 7C0000            xcall _LCD_Position
 000E                   .dbline 20
 000E           ;       DBB00_WritePulseWidth(pulseWidth);
 000E 62D000            mov REG[0xd0],>_pulseWidth
 0011 5100              mov A,[_pulseWidth]
 0013 7C0000            xcall _DBB00_WritePulseWidth
 0016                   .dbline 21
 0016           ;       DBB00_Start();
 0016 7C0000            xcall _DBB00_Start
 0019                   .dbline 22
 0019           ;       TachOverridePWM_Start();
 0019 7C0000            xcall _TachOverridePWM_Start
 001C                   .dbline 23
 001C           ;       LCD_PrHexByte(DBB00_bReadPulseWidth());
 001C 7C0000            xcall _DBB00_bReadPulseWidth
 001F 20                pop X
 0020 62D000            mov REG[0xd0],>__r0
 0023 10                push X
 0024 7C0000            xcall _LCD_PrHexByte
 0027 20                pop X
 0028                   .dbline 24
 0028           ;       INT_MSK0 |= 0x40;
 0028 43E040            or REG[0xe0],64
 002B                   .dbline 25
 002B           ;       M8C_EnableGInt;
 002B 7101                      or  F, 01h
 002D           
 002D 806D              xjmp L3
 002F           L2:
 002F                   .dbline 26
 002F           ;       while(1){
 002F                   .dbline 27
 002F           ;               M8C_Sleep;
 002F 43FF08            or REG[0xff],8
 0032                   .dbline 28
 0032           ;               prt1 = PRT1DR;
 0032 5D04              mov A,REG[0x4]
 0034 62D000            mov REG[0xd0],>_prt1
 0037 5300              mov [_prt1],A
 0039                   .dbline 29
 0039           ;               prt1 &= 0x01;
 0039 260001            and [_prt1],1
 003C                   .dbline 30
 003C           ;               if(prt1 == 0x01){
 003C 3C0001            cmp [_prt1],1
 003F B02A              jnz L5
 0041                   .dbline 31
 0041           ;                       dBounce++;
 0041                   .dbline 31
 0041 62D000            mov REG[0xd0],>_dBounce
 0044 7601              inc [_dBounce+1]
 0046 0E0000            adc [_dBounce],0
 0049                   .dbline 32
 0049           ;                       if(dBounce == 3){
 0049 3C0000            cmp [_dBounce],0
 004C B026              jnz L6
 004E 3C0103            cmp [_dBounce+1],3
 0051 B021              jnz L6
 0053           X1:
 0053                   .dbline 33
 0053           ;                               pulseWidth--;
 0053                   .dbline 33
 0053 62D000            mov REG[0xd0],>_pulseWidth
 0056 7A00              dec [_pulseWidth]
 0058                   .dbline 34
 0058           ;                               DBB00_WritePulseWidth(pulseWidth);
 0058 10                push X
 0059 5100              mov A,[_pulseWidth]
 005B 7C0000            xcall _DBB00_WritePulseWidth
 005E 20                pop X
 005F                   .dbline 35
 005F           ;                               dBounce = 0;
 005F 62D000            mov REG[0xd0],>_dBounce
 0062 550100            mov [_dBounce+1],0
 0065 550000            mov [_dBounce],0
 0068                   .dbline 36
 0068           ;                       }
 0068                   .dbline 37
 0068           ;               }
 0068 800A              xjmp L6
 006A           L5:
 006A                   .dbline 39
 006A           ;               else
 006A           ;               {
 006A                   .dbline 40
 006A           ;                       dBounce = 0;
 006A 62D000            mov REG[0xd0],>_dBounce
 006D 550100            mov [_dBounce+1],0
 0070 550000            mov [_dBounce],0
 0073                   .dbline 41
 0073           ;               }
 0073           L6:
 0073                   .dbline 43
 0073           ; 
 0073           ;               LCD_Position(0,4);
 0073 10                push X
 0074 5704              mov X,4
 0076 5000              mov A,0
 0078 7C0000            xcall _LCD_Position
 007B 20                pop X
 007C                   .dbline 44
 007C           ;               LCD_PrHexByte(dBounce);
 007C 62D000            mov REG[0xd0],>_dBounce
 007F 5101              mov A,[_dBounce+1]
 0081 62D000            mov REG[0xd0],>__r0
 0084 10                push X
 0085 7C0000            xcall _LCD_PrHexByte
 0088                   .dbline 45
 0088           ;               LCD_Position(1,4);
 0088 5704              mov X,4
 008A 5001              mov A,1
 008C 7C0000            xcall _LCD_Position
 008F                   .dbline 46
 008F           ;               LCD_PrHexByte(DBB00_bReadPulseWidth());
 008F 7C0000            xcall _DBB00_bReadPulseWidth
 0092 20                pop X
 0093 62D000            mov REG[0xd0],>__r0
 0096 10                push X
 0097 7C0000            xcall _LCD_PrHexByte
 009A 20                pop X
 009B                   .dbline 47
 009B           ;       }
 009B           L3:
 009B                   .dbline 26
 009B 8F93              xjmp L2
 009D           X0:
 009D                   .dbline -2
 009D           L1:
 009D                   .dbline 0 ; func end
 009D 8FFF              jmp .
 009F                   .dbend
